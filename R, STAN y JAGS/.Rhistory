color="blue", linetype="dashed", size=1))
total_claim_amount+
ggtitle('Función de densidad acumulada del total de reclamaciones') +
labs(x = "Total de reclamaciones", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")
total_claim_amount+ geom_vline(aes(xintercept=mean(reclam_total)),
color="blue", linetype="dashed", size=1)))
total_claim_amount+
ggtitle('Función de densidad acumulada del total de reclamaciones') +
labs(x = "Total de reclamaciones", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")
total_claim_amount+ geom_vline(aes(xintercept=mean(reclam_total))),
total_claim_amount+
ggtitle('Función de densidad acumulada del total de reclamaciones') +
labs(x = "Total de reclamaciones", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")
total_claim_amount+ geom_vline(aes(xintercept=mean(reclam_total)),
color="blue", linetype="dashed", size=1)
total_claim_amount+
ggtitle('Función de densidad acumulada del total de reclamaciones') +
labs(x = "Total de reclamaciones", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")
total_claim_amount + geom_vline(aes(xintercept=mean(reclam_total)),
color="blue", linetype="dashed", size=1)
total_claim_amount+
ggtitle('Función de densidad acumulada del total de reclamaciones') +
labs(x = "Total de reclamaciones", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")+
geom_vline(aes(xintercept=mean(reclam_total)),
color="blue", linetype="dashed", size=1)
total_claim_amount+
ggtitle('Función de densidad acumulada del total de reclamaciones') +
labs(x = "Total de reclamaciones", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")+
geom_vline(aes(xintercept=mean(reclam_total)),
color="#003999", linetype="dashed", size=1)
total_claim_amount+
ggtitle('Función de densidad acumulada del total de reclamaciones') +
labs(x = "Total de reclamaciones", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")+
geom_vline(aes(xintercept=mean(reclam_total)),
color="#003999", linetype="dashed", size=2)
total_claim_amount+
ggtitle('Función de densidad acumulada del total de reclamaciones') +
labs(x = "Total de reclamaciones", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")+
geom_vline(aes(xintercept=mean(reclam_total)),
color="#003999", linetype="dashed", size=.5)
total_claim_amount+
ggtitle('Función de densidad acumulada del total de reclamaciones') +
labs(x = "Total de reclamaciones", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")+
geom_vline(aes(xintercept=mean(reclam_total), xintercept = median(reclam_total))),
total_claim_amount+
ggtitle('Función de densidad acumulada del total de reclamaciones') +
labs(x = "Total de reclamaciones", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")+
geom_vline(aes(xintercept=mean(reclam_total), xintercept = median(reclam_total)),
color="#003999", linetype="dashed", size=.5)
total_claim_amount+
ggtitle('Función de densidad acumulada del total de reclamaciones') +
labs(x = "Total de reclamaciones", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")+
geom_vline(aes(xintercept=c(mean(reclam_total), median(reclam_total))),
color="#003999", linetype="dashed", size=.5)
total_claim_amount+
ggtitle('Función de densidad acumulada del total de reclamaciones') +
labs(x = "Total de reclamaciones", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")+
geom_vline(aes(xintercept=mean(reclam_total)),
color="#003999", linetype="dashed", size=.5)
total_claim_amount+
ggtitle('Función de densidad acumulada del total de reclamaciones') +
labs(x = "Total de reclamaciones", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")+
geom_vline(aes(xintercept=median(reclam_total)),
color="#003999", linetype="dashed", size=.5)
cols= "cyan"
ingreso  +
ggtitle('Boxplot del monto mensual de la prima ') + xlim(c(0,10000))+
labs(x = "Total de primas", fill= "Conteo") +
stat_boxplot(geom = "errorbar", width = 0.15) +
geom_boxplot(aes(fill="cyan"), #Relleno de la caja
fill = "#003999",           # Color caja
alpha = 0.5,        # Transparencia
color = 1,          # Color del borde
outlier.colour = "#003366") # Color atípic
ingreso  +
ggtitle('Boxplot del monto mensual de la prima ') + xlim(c(0,10000))+
labs(x = "Total de primas", fill= "Conteo") +
stat_boxplot(geom = "errorbar", width = 0.15) +
geom_boxplot(aes(fill="cyan"), #Relleno de la caja
fill = "#003999",           # Color caja
alpha = 0.5,        # Transparencia
color = 1,          # Color del borde
outlier.colour = "#003366") # Color atípic
ingreso  +
ggtitle('Boxplot del monto mensual de la prima ') + xlim(c(0,500))+
labs(x = "Total de primas", fill= "Conteo") +
stat_boxplot(geom = "errorbar", width = 0.15) +
geom_boxplot(aes(fill="cyan"), #Relleno de la caja
fill = "#003999",           # Color caja
alpha = 0.5,        # Transparencia
color = 1,          # Color del borde
outlier.colour = "#003366") # Color atípic
total_claim_amount+
ggtitle('Función de distribución acumulada del total de reclamaciones') +
labs(x = "Total de reclamaciones", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")+
geom_vline(aes(xintercept=median(reclam_total)),
color="#003999", linetype="dashed", size=.5)
total_claim_amount+
ggtitle('Función de distribución acumulada del total de reclamaciones') +
labs(x = "Total de reclamaciones", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")+
geom_vline(aes(xintercept=mean(reclam_total)),
color="#003999", linetype="dashed", size=.5)
print("Media: ")
mean(numericas_df$reclam_total)
print("Varianza: ")
var(numericas_df$reclam_total)
print("Asimetria: ")
skewness(numericas_df$reclam_total) # Nos da el valor de la asimetria de los datos de la variable
print("Curtosis: ")
kurtosis(numericas_df$reclam_total) # Nos da el achatamiento de la distribucion de los datos de la variable
total_claim_amount + geom_histogram( binwidth=15, aes(fill=..count..), col='black') +ggtitle('Histograma del total de reclamaciones') +labs(x = "Total de reclamaciones", y="Número de reclamaciones", fill= "Conteo") +  geom_rug(aes())
total_claim_amount + geom_histogram( binwidth=30, aes(fill=..count..), col='black') +ggtitle('Histograma del total de reclamaciones') +labs(x = "Total de reclamaciones", y="Número de reclamaciones", fill= "Conteo") +  geom_rug(aes())
monthly_premium = ggplot(numericas_df , aes(x = prima_mens))
monthly_premium + geom_histogram( binwidth=2, aes(fill=..count..), col='black') +ggtitle('Histograma del monto mensual de la prima') +labs(x = "Total de primas", y="Monto de las primas", fill= "Monto") +  geom_rug(aes())
cols= "cyan"
monthly_premium  +
ggtitle('Boxplot del monto mensual de la prima ') + xlim(c(0,350))+
labs(x = "Total de primas", fill= "Conteo") +
stat_boxplot(geom = "errorbar", width = 0.15) +
geom_boxplot(aes(fill="cyan"), #Relleno de la caja
fill = "#003999",           # Color caja
alpha = 0.5,        # Transparencia
color = 1,          # Color del borde
outlier.colour = "#003366") # Color atípic
monthly_premium +
ggtitle('Función de densidad acumulada del monto mensual de la prima') +
labs(x = "Total de primas", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")
monthly_premium +
ggtitle('Función de distribución acumulada del monto mensual de la prima') +
labs(x = "Total de primas", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian") +
geom_vline(aes(xintercept=mean(reclam_total)),
color="#003999", linetype="dashed", size=.5)
monthly_premium +
ggtitle('Función de distribución acumulada del monto mensual de la prima') +
labs(x = "Total de primas", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian") +
geom_vline(aes(xintercept=mean(prima_mens)),
color="#003999", linetype="dashed", size=.5)
print("Asimetria: ")
skewness(numericas_df$prima_mens) # Nos da el valor de la asimetria de los datos de la variable
print("Curtosis: ")
kurtosis(numericas_df$prima_mens) # Nos da el achatamiento de la distribucion de los datos de la variable
plot_estados = ggplot(data=total_polizas, aes(x=Cantidad.de.polizas, y=Tipo.de.poliza, fill=Tipo.de.poliza)) +
geom_bar(stat="identity", position="dodge") +labs(x = "Número de Pólizas", y="Tipo de póliza", fill= "Póliza")
plot_estados
monthly_premium = ggplot(numericas_df , aes(x = prima_mens))
monthly_premium + geom_histogram( binwidth=2, aes(fill=..count..), col='black') +ggtitle('Histograma del monto mensual de la prima') +labs(x = "Total de primas", y="Monto de las primas", fill= "Monto") +  geom_rug(aes())
monthly_premium = ggplot(numericas_df , aes(x = prima_mens))
monthly_premium + geom_histogram( binwidth=2, aes(fill=..count..), col='black') +ggtitle('Histograma del monto mensual de la prima') +labs(x = "Total de primas", y="Monto de las primas", fill= "Monto") +  geom_rug(aes()) + geom_vline(aes(xintercept=mean(reclam_total)),
color="#003999", linetype="dashed", size=.5)
monthly_premium = ggplot(numericas_df , aes(x = prima_mens))
monthly_premium + geom_histogram( binwidth=2, aes(fill=..count..), col='black') +ggtitle('Histograma del monto mensual de la prima') +labs(x = "Total de primas", y="Monto de las primas", fill= "Monto") +  geom_rug(aes()) + geom_vline(aes(xintercept=mean(prima_mens)),
color="#003999", linetype="dashed", size=.5)
monthly_premium = ggplot(numericas_df , aes(x = prima_mens))
monthly_premium + geom_histogram( binwidth=2, aes(fill=..count..), col='black') +ggtitle('Histograma del monto mensual de la prima') +labs(x = "Total de primas", y="Monto de las primas", fill= "Monto") +  geom_rug(aes()) + geom_vline(aes(xintercept=mediana(prima_mens)),
color="#003999", linetype="dashed", size=.5)
monthly_premium = ggplot(numericas_df , aes(x = prima_mens))
monthly_premium + geom_histogram( binwidth=2, aes(fill=..count..), col='black') +ggtitle('Histograma del monto mensual de la prima') +labs(x = "Total de primas", y="Monto de las primas", fill= "Monto") +  geom_rug(aes()) + geom_vline(aes(xintercept=median(prima_mens)),
color="#003999", linetype="dashed", size=.5)
monthly_premium = ggplot(numericas_df , aes(x = prima_mens))
monthly_premium + geom_histogram( binwidth=2, aes(fill=..count..), col='black') +ggtitle('Histograma del monto mensual de la prima') +labs(x = "Total de primas", y="Monto de las primas", fill= "Monto") +  geom_rug(aes()) + geom_vline(aes(xintercept=mean(prima_mens)),
color="#003999", linetype="dashed", size=.5)
monthly_premium = ggplot(numericas_df , aes(x = prima_mens))
monthly_premium + geom_histogram( binwidth=2, aes(fill=..count..), col='black') +ggtitle('Histograma del monto mensual de la prima') +labs(x = "Total de primas", y="Monto de las primas", fill= "Monto") +  geom_rug(aes()) + geom_vline(aes(xintercept=median(prima_mens)),
color="#003999", linetype="dashed", size=.5)
median(numericas_df$prima_mens)
cols= "cyan"
monthly_premium  +
ggtitle('Boxplot del monto mensual de la prima ') + xlim(c(0,350))+
labs(x = "Total de primas", fill= "Conteo") +
stat_boxplot(geom = "errorbar", width = 0.15) +
geom_boxplot(aes(fill="cyan"), #Relleno de la caja
fill = "#003999",           # Color caja
alpha = 0.5,        # Transparencia
color = 1,          # Color del borde
outlier.colour = "#003366") # Color atípic
quantile(numericas_df$prima_mens, c(0.25, 0.5, 0.75))
print("Media: ")
mean(numericas_df$prima_mens)
print("Varianza: ")
var(numericas_df$prima_mens)
print("Asimetria: ")
skewness(numericas_df$prima_mens) # Nos da el valor de la asimetria de los datos de la variable
print("Curtosis: ")
kurtosis(numericas_df$prima_mens) # Nos da el achatamiento de la distribucion de los datos de la variable
ingreso = ggplot(numericas_df , aes(x = income))
ingreso + geom_histogram( binwidth=2000, aes(fill=..count..), col='black') +ggtitle('Histograma del ingreso') +labs(x = "Total de ingresos", y="Monto de los ingresos", fill= "Monto") +  geom_rug(aes())
ingreso + geom_histogram( binwidth=2000, aes(fill=..count..), col='black') +ggtitle('Histograma del ingreso') +labs(x = "Total de ingresos", y="Monto de los ingresos", fill= "Monto") +  geom_rug(aes()) +
geom_vline(aes(xintercept=mean(income)),
color="#003999", linetype="dashed", size=.5)
ingreso  +
ggtitle('Boxplot del monto mensual de la prima ') + xlim(c(0,500))+
labs(x = "Total de primas", fill= "Conteo") +
stat_boxplot(geom = "errorbar", width = 0.15) +
geom_boxplot(aes(fill="cyan"), #Relleno de la caja
fill = "#003999",           # Color caja
alpha = 0.5,        # Transparencia
color = 1,          # Color del borde
outlier.colour = "#003366") # Color atípic
ingreso +
ggtitle('Función de densidad acumulada del monto mensual de la prima') +
labs(x = "Total de primas", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")
print("Media: ")
mean(numericas_df$income)
print("Varianza: ")
var(numericas_df$income)
print("Asimetria: ")
skewness(numericas_df$income) # Nos da el valor de la asimetria de los datos de la variable
print("Curtosis: ")
kurtosis(numericas_df$income) # Nos da el achatamiento de la distribucion de los datos de la variable
clv = ggplot(numericas_df , aes(x = clv))
clv + geom_histogram( binwidth=150, aes(fill=..count..), col='black') +ggtitle('Histograma del monto mensual de la prima') +labs(x = "Total de primas", y="Monto de las primas", fill= "Monto") +  geom_rug(aes())
clv = ggplot(numericas_df , aes(x = clv))
clv + geom_histogram( binwidth=150, aes(fill=..count..), col='black') +ggtitle('Histograma del monto mensual de la prima') +labs(x = "Total de primas", y="Monto de las primas", fill= "Monto") +  geom_rug(aes())
clv = ggplot(numericas_df , aes(x = clv))
clv + geom_histogram( binwidth=150, aes(fill=..count..), col='black') +ggtitle('Histograma del monto mensual de la prima') +labs(x = "Total de primas", y="Monto de las primas", fill= "Monto") +  geom_rug(aes()) +  geom_vline(aes(xintercept=mean(clv),
color="#003999", linetype="dashed", size=.5)
clv = ggplot(numericas_df , aes(x = clv))
clv + geom_histogram( binwidth=150, aes(fill=..count..), col='black') +ggtitle('Histograma del monto mensual de la prima') +labs(x = "Total de primas", y="Monto de las primas", fill= "Monto") +  geom_rug(aes()) +  geom_vline(aes(xintercept=mean(clv)),
color="#003999", linetype="dashed", size=.5)
clv = ggplot(numericas_df , aes(x = clv))
clv + geom_histogram( binwidth=150, aes(fill=..count..), col='black') +ggtitle('Histograma del monto mensual de la prima') +labs(x = "Total de primas", y="Monto de las primas", fill= "Monto") +  geom_rug(aes()) +  geom_vline(aes(xintercept=mean(clv)),
color="#003999", linetype="dashed", size=.5)
clv = ggplot(numericas_df , aes(x = clv))
clv + geom_histogram( binwidth=150, aes(fill=..count..), col='black') +ggtitle('Histograma del monto mensual de la prima') +labs(x = "Total de primas", y="Monto de las primas", fill= "Monto") +  geom_rug(aes()) +  geom_vline(aes(xintercept=median(clv)),
color="#003999", linetype="dashed", size=.5)
median(numericas_df$clv)
cols= "cyan"
clv  +
ggtitle('Boxplot del monto mensual de la prima ') + xlim(c(0,20000))+
labs(x = "Total de primas", fill= "Conteo") +
stat_boxplot(geom = "errorbar", width = 0.15) +
geom_boxplot(aes(fill="cyan"), #Relleno de la caja
fill = "#003999",           # Color caja
alpha = 0.5,        # Transparencia
color = 1,          # Color del borde
outlier.colour = "#003366") # Color atípic
cols= "cyan"
clv  +
ggtitle('Boxplot del monto mensual de la prima ') + xlim(c(0,20000))+
labs(x = "Total de primas", fill= "Conteo") +
stat_boxplot(geom = "errorbar", width = 0.15) +
geom_boxplot(aes(fill="cyan"), #Relleno de la caja
fill = "#003999",           # Color caja
alpha = 0.5,        # Transparencia
color = 1,          # Color del borde
outlier.colour = "#003366") # Color atípic
quantile(datos$clv, c(0.25,0.5,0.75))
clv +
ggtitle('Función de densidad acumulada del monto mensual de la prima') +
labs(x = "Total de primas", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")
print("Asimetria: ")
skewness(numericas_df$clv) # Nos da el valor de la asimetria de los datos de la variable
print("Curtosis: ")
kurtosis(numericas_df$clv) # Nos da el achatamiento de la distribucion de los datos de la variable
clv = ggplot(numericas_df , aes(x = clv))
clv + geom_histogram( binwidth=150, aes(fill=..count..), col='black') +ggtitle('Histograma del clv') +labs(x = "Total de primas", y="Monto de las primas", fill= "Monto") +  geom_rug(aes()) +  geom_vline(aes(xintercept=median(clv)),
color="#003999", linetype="dashed", size=.5)
clv +
ggtitle('Función de distribución acumulada del clv') +
labs(x = "Total de clv", y = "Densidad") +
geom_density(color = "#003366",
fill = "#003999",
alpha = .10,
lwd = 1,
linetype = 1,
bw = "nrd",
kernel = "gaussian")
View(polizas1)
ls(path = "^V")
"2020-2-28" - "2020-3-1"
y= 1:9
dim(y) = c(3,3)
class(y)
mydf = data.frame(x = 1:3, y = c("a", "b", "c"), stringAsFactor = FALSE)
mydf$y
clas(mydf$y)
class(mydf$y)
z = list(1,2 , c("a", "b"))
y = unlist(z)
y
unclas(as.Date("1971-01-01"))
unclass(as.Date("1971-01-01"))
?file.open()
myvect = c(-2,-1,0)
as.logical(myvect)
install.package("rjags")
install.package("rjags")
install.packages("rjags")
require(jags)
install.packages("jags")
install.packages("installr", dependencies = TRUE)
library(installr)
updateR()
install.packages("installr", dependencies = TRUE)
library(installr)
updateR()
install.packages("jags")
install.packages("rjags")
require(rjags)
setwd("~/Libros/Servicio Social/R, STAN y JAGS")
install.packages("MCMCpack")
##################################################
### Packages:
library(rjags)
library(MCMCpack) ### MCMC
getwd()
##################################################
### Simular datos
n = 100
theta = 3   ### media
sigma2 = 1   ### varianza
set.seed(12345)
X = rnorm(n,theta,sqrt(sigma2))
hist(X,nclass=10)
hist(X,nclass=10)
mod <- lm(X ~ 1)
summary(mod)
mod <- lm(X ~ 1)
summary(mod)
mean(X)   ### Estimador de la Media
sum((X-mean(X))^2)/(n-1)   ###?Estimador de la varianza
### hyperparameters prior No informative
theta0 = 0
tau2 = 100
a = 0.1
b = 0.1
### MCMC
SIM =1000   # chain MCMC
SIGMA2 = matrix(0,SIM)
THETA = matrix(0,SIM)
View(THETA)
### iniciales
theta = mean(X)   ### Estimador de la Media
sigma2 = sum((X-mean(X))^2)/(n-1)   ### Estimador de la varianza
for(sim in 1:SIM){
### theta
theta.var = sigma2*tau2/(sigma2+n*tau2)
theta.mean = (sigma2*theta0 + n*tau2*mean(X))/(sigma2+n*tau2)
theta <- rnorm(1,theta.mean,sqrt(theta.var))
### sigma2
sigma2.shape = n/2+a
sigma2.scale = sum((X-theta)^2)/2+b
sigma2 = rinvgamma(1,sigma2.shape,sigma2.scale)
### MCMC sample
THETA[sim,] = theta
SIGMA2[sim] = sigma2
}
plot(as.mcmc(THETA))
plot(as.mcmc(SIGMA2))
summary(as.mcmc(THETA))
summary(as.mcmc(SIGMA2))
data <- list(
X = X,
n = n ,
theta0 = 0 ,
tau2inv = 1/100 ,
a = 0.1 ,
b = 0.1
)
param <- c("theta","sigma2")
inits <- function(){	list(   ### opcional
"theta" = rnorm(1,0,1) ,
"sigma2inv" = rgamma(1,1,1)
)	}
fit <- jags.model("Bayes7_3DistribucionNormal.bug", data, inits,n.chains=2)
update(fit,1000)
sample <- coda.samples(fit, param, n.iter=100, thin=1)
plot(sample)
summary(sample)
traceplot(sample)
install.packages(c("ADGofTest", "BB", "ChainLadder", "eva", "evd", "evir", "ismev", "mclust", "mixdist", "mixtools", "psych", "vcd"))
setwd("~/Libros/Servicio Social/R, STAN y JAGS")
